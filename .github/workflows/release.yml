name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binaries
      run: |
        mkdir -p builds
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o builds/code2txt-windows-amd64.exe
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o builds/code2txt-linux-amd64
        
        # macOS Intel
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o builds/code2txt-macos-intel
        
        # macOS Apple Silicon
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o builds/code2txt-macos-arm64
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## üöÄ code2txt - AI Ready Code Converter
          
          A fast CLI tool that converts code repositories into AI-friendly text format.
          Perfect for feeding codebases to ChatGPT, Claude, or other AI models.
          
          ### ‚ú® Features
          - **Fast scanning**: Process 1000+ files quickly
          - **Token counting**: Accurate GPT-4/Claude token estimation  
          - **Tree visualization**: Beautiful directory structure display
          - **Smart filtering**: Respects .gitignore automatically
          - **Cross-platform**: Works on Windows, Mac, and Linux
          - **Flexible patterns**: Include/exclude file patterns
          
          ### üì• Installation
          1. Download the binary for your platform below
          2. Make executable (Linux/macOS): `chmod +x code2txt-*`
          3. Move to PATH or run directly
          
          ### üñ•Ô∏è Platform Downloads
          - **Windows 64-bit**: `code2txt-windows-amd64.exe`
          - **Linux 64-bit**: `code2txt-linux-amd64`
          - **macOS Intel**: `code2txt-macos-intel`
          - **macOS Apple Silicon**: `code2txt-macos-arm64`
          
          ### üîß Quick Start
          ```bash
          # Scan project and show token counts
          code2txt ./my-project --tokens
          
          # Export to file with specific patterns
          code2txt ./src -i "*.go,*.js" -o analysis.txt
          ```
        draft: false
        prerelease: false
    
    - name: Upload Windows Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/code2txt-windows-amd64.exe
        asset_name: code2txt-windows-amd64.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Linux Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/code2txt-linux-amd64
        asset_name: code2txt-linux-amd64
        asset_content_type: application/octet-stream
    
    - name: Upload macOS Intel Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/code2txt-macos-intel
        asset_name: code2txt-macos-intel
        asset_content_type: application/octet-stream
    
    - name: Upload macOS ARM Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/code2txt-macos-arm64
        asset_name: code2txt-macos-arm64
        asset_content_type: application/octet-stream